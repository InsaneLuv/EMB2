from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.handler import CancelHandler
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from database import search_profile
from database.events import event_read, inline_helper, event_update, search_event, get_psettings
from filters import IsSubscriber
from keyboards.inline import edit_ikb_menu
from loader import dp, _
from states import ev_helper, parse_paper_clan
from tools.random_emoji.random_emoji import emoji
from utils.misc import rate_limit


@rate_limit(limit=2)
@dp.message_handler(IsSubscriber(), lambda message: "üìç" in message.text)

async def button_current_events_react(message: types.Message):
    event_list = await event_read("current")
    if event_list is not None:
        await dp.bot.send_message(message.from_user.id, _('üìç –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∏–≤–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.\n\n'
                                                        '<em>–í—Å–µ –∏–≤–µ–Ω—Ç—ã –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏—Ö –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –≤—ã–¥–∞—á—É –Ω–∞–≥—Ä–∞–¥.</em>'),
                                  parse_mode="HTML", reply_markup=genmarkup(message.from_user.id, event_list))
    else:
        await dp.bot.send_message(chat_id=message.from_user.id, text=_("{emoji} –°–µ–π—á–∞—Å –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–∏–∫–∞–∫–∏—Ö –∏–≤–µ–Ω—Ç–æ–≤, "
                                                                     "–≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ").format(emoji=emoji()))


@dp.message_handler(state=ev_helper.event)
async def command_any_unknown(message: types.Message, state: FSMContext):
    CancelHandler()
    await state.finish()
    await dp.bot.send_message(chat_id=message.from_user.id, text=_('üö® –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ\n'
                                                                 '(–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–≤–æ–¥)'))


@dp.callback_query_handler(lambda call: True)
async def stoptopupcall(callback_query: types.CallbackQuery, state: FSMContext):
    await dp.bot.answer_callback_query(callback_query.id)
    event = await inline_helper(callback_query.data)
    if event is not None:
        await dp.bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text=
            f"üéñ –ù–∞–∑–≤–∞–Ω–∏–µ: {event[1]}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {event[2]}\n"
            f'üîó –°—Å—ã–ª–∫–∞: {event[3]}\n',
            parse_mode='HTML',
            reply_markup=gen_event_markup(callback_query.from_user.id, event[0])
        )
        await state.update_data(event=event)
        await ev_helper.next()


@dp.callback_query_handler(state=ev_helper.event)
async def call_organizer1(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    event = data.get("event")
    if call.data == "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å":
        profile = await search_profile("tg_id", call.from_user.id)
        if profile is None:
            await dp.bot.answer_callback_query(call.id)
            await dp.bot.send_message(chat_id=call.from_user.id,
                                      text=f'{emoji()} –ù–µ–ª—å–∑—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∏–≤–µ–Ω—Ç–∞—Ö –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.')
            CancelHandler()
            await state.finish()
        else:
            if str(event[5]) != "*":
                access = event[5].split(',')
                if str(call.from_user.id) not in access:
                    await dp.bot.send_message(chat_id=call.from_user.id,
                                              text=f'{emoji()} '
                                                   f'<a href="tg://user?id={event[0]}">–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä</a> –æ—Ç–∫–ª—é—á–∏–ª —Å–≤–æ–±–æ–¥–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ.',
                                              parse_mode='HTML')
                    await call.answer()
                else:
                    await dp.bot.delete_message(message_id=call.message.message_id, chat_id=call.from_user.id)
                    await dp.bot.send_message(chat_id=call.from_user.id,
                                              text=_('{emoji} '
                                                   '–û—Ç–ø—Ä–∞–≤—å –≥–∞–∑–µ—Ç—ã.\n\n'
                                                   '(1 —Å—Ç—Ä–æ–∫–∞ - 1 —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥–∞–∑–µ—Ç—É)\n'
                                                   '–ù–µ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Å—Å—ã–ª–æ–∫.').format(emoji=emoji()),
                                              parse_mode='HTML')
                    await parse_paper_clan.paper_clan.set()
                    await call.answer()


            else:
                await dp.bot.send_message(chat_id=call.from_user.id,
                                          text=_('{emoji} '
                                               '–°–≤–æ–±–æ–¥–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ —Å–µ–π—á–∞—Å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.').format(emoji=emoji()),
                                          parse_mode='HTML')
                await call.answer()
    elif call.data == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        await dp.bot.edit_message_text(
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            text=
            f"üéñ –ù–∞–∑–≤–∞–Ω–∏–µ: {event[1]}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {event[2]}\n"
            f'üîó –°—Å—ã–ª–∫–∞: {event[3]}\n'
            f'üîë –î–æ—Å—Ç—É–ø: {event[5]}',
            parse_mode='HTML',
            reply_markup=edit_ikb_menu
        )
        await ev_helper.next()
    else:
        event_list = await event_read("current")
        if event_list is not None:
            await dp.bot.edit_message_text(
                chat_id=call.from_user.id,
                message_id=call.message.message_id,
                text=f'üìç –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∏–≤–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.\n\n'
                     f'<em>–í—Å–µ –∏–≤–µ–Ω—Ç—ã –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞ –Ω–µ '
                     f'–æ—Ç–≤–µ—á–∞–µ—Ç '
                     f'–∑–∞ –∏—Ö –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –≤—ã–¥–∞—á—É –Ω–∞–≥—Ä–∞–¥.</em>',
                parse_mode="HTML",
                reply_markup=genmarkup(call.from_user.id, event_list)
            )
            CancelHandler()
            await state.finish()
        else:
            await dp.bot.send_message(chat_id=call.from_user.id,
                                      text=f"{emoji()} –°–µ–π—á–∞—Å –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–∏–∫–∞–∫–∏—Ö –∏–≤–µ–Ω—Ç–æ–≤, "
                                           "–≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ")
            CancelHandler()
            await state.finish()


@dp.callback_query_handler(state=ev_helper.editor)
async def event_creator(call: CallbackQuery, state: FSMContext):

    if call.data == "–ò–∑–º–µ–Ω–∏—Ç—å_–Ω–∞–∑–≤–∞–Ω–∏–µ":
        await call.bot.edit_message_text(
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            text='üéñ –ö–∞–∫ –Ω–∞–∑–æ–≤—ë–º –∏–≤–µ–Ω—Ç?'
        )
        await ev_helper.edit_title.set()

    elif call.data == "–ò–∑–º–µ–Ω–∏—Ç—å_–æ–ø–∏—Å–∞–Ω–∏–µ":
        await call.bot.edit_message_text(
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            text='üìÑ –û–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞'
        )
        await ev_helper.edit_desc.set()

    elif call.data == "–ò–∑–º–µ–Ω–∏—Ç—å_—Å—Å—ã–ª–∫—É":
        await call.bot.edit_message_text(
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            text='üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ'
        )
        await ev_helper.edit_url.set()

    elif call.data == "–ó–∞–≤–µ—Ä—à–∏—Ç—å_–∏–≤–µ–Ω—Ç":
        data = await state.get_data()
        event = data.get("event")
        await event_update("state", "False", event[1])
        event_list = await event_read("current")
        if event_list is not None:
            await dp.bot.edit_message_text(
                chat_id=call.from_user.id,
                message_id=call.message.message_id,
                text=f'üìç –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∏–≤–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.\n\n'
                     f'<em>–í—Å–µ –∏–≤–µ–Ω—Ç—ã –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞ –Ω–µ '
                     f'–æ—Ç–≤–µ—á–∞–µ—Ç '
                     f'–∑–∞ –∏—Ö –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –≤—ã–¥–∞—á—É –Ω–∞–≥—Ä–∞–¥.</em>',
                parse_mode="HTML",
                reply_markup=genmarkup(call.from_user.id, event_list)
            )
            CancelHandler()
            await state.finish()

    elif call.data == "–í—ã–¥–∞—Ç—å_–¥–æ—Å—Ç—É–ø":
        await call.bot.edit_message_text(
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            text='üîë –ö–æ–º—É –≤—ã–¥–∞—ë–º –¥–æ—Å—Ç—É–ø?\n\n'
                 '<em>–í–≤–µ–¥–∏ id —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.</em>'
        )
        await ev_helper.edit_access.set()

    
    elif call.data == "points_rules":
        await call.bot.edit_message_text(
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            text='üß¨ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ points-–ø—Ä–∞–≤–∏–ª.\n'
                 '–ó–∞ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤–∞–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ points,\n'
                 '–ù–∞–ø—Ä–∏–º–µ—Ä: 5000 —É–±–∏—Ç—ã—Ö –∫—Ä—ã—Å - 1 –∑–≤–µ–∑–¥–∞\n\n'
                 '–í–≤–æ–¥–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∑–∞ –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∏–∂–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤:\n'
                 's_police\n'
                 's_police_heli\n'
                 's_police_car\n'
                 's_ordinary\n'
                 's_dragons\n'
                 's_pdragons\n'
                 's_alien\n'
                 's_rat\n–∏ —Ç.–¥.\n'
                 '–ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç - –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞, –ø—Ä–∏–º–µ—Ä:\n'
                 '5000\n'
                 '2500\n–∏ —Ç.–¥.\n'
                 '–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –≤—ã –≤—ã—Å—Ç–∞–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è s_police –∏ s_police_heli\n'
                 '5000 —É–±–∏—Ç—ã—Ö –ø–æ–ª–∏—Ü–µ–π—Å–∫–∏—Ö = 1 –∑–≤–µ–∑–¥–∞\n'
                 '2500 —É–±–∏—Ç—ã—Ö –≤–µ—Ä—Ç–æ–ª—ë—Ç–æ–≤ = 1 –∑–≤–µ–∑–¥–∞.'
        )
        await ev_helper.edit_psettings.set()


    elif call.data == "–ù–∞–∑–∞–¥":
        data = await state.get_data()
        event = data.get("event")
        await dp.bot.edit_message_reply_markup(message_id=call.message.message_id, chat_id=call.from_user.id,
                                               reply_markup=gen_event_markup(call.from_user.id, event[0]))
        await ev_helper.event.set()

    

@dp.message_handler(state=ev_helper.edit_title)
async def state10(message: types.Message, state: FSMContext):
    data = await state.get_data()
    event = data.get("event")
    await event_update("name", message.text, event[1])
    new_event = await search_event(message.text)
    await state.update_data(event=new_event)
    await dp.bot.delete_message(message_id=message.message_id,chat_id=message.from_user.id)
    if event is not None:
        await dp.bot.edit_message_text(
        chat_id=message.from_user.id,
        message_id=message.message_id,
            text=
            f"üéñ –ù–∞–∑–≤–∞–Ω–∏–µ: {new_event[1]}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {new_event[2]}\n"
            f'üîó –°—Å—ã–ª–∫–∞: {new_event[3]}\n'
            f'üîë –î–æ—Å—Ç—É–ø: {new_event[5]}',
            parse_mode='HTML',
            reply_markup=gen_event_markup(message.from_user.id, new_event[0])
        )
        await ev_helper.event.set()

@dp.message_handler(state=ev_helper.edit_desc)
async def state10(message: types.Message, state: FSMContext):
    data = await state.get_data()
    event = data.get("event")
    await event_update("description", message.text, event[1])
    new_event = await search_event(event[1])
    await state.update_data(event=new_event)
    await dp.bot.delete_message(message_id=message.message_id,chat_id=message.from_user.id)
    if event is not None:
        await dp.bot.edit_message_text(
        chat_id=message.from_user.id,
        message_id=message.message_id,
            text=
            f"üéñ –ù–∞–∑–≤–∞–Ω–∏–µ: {new_event[1]}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {new_event[2]}\n"
            f'üîó –°—Å—ã–ª–∫–∞: {new_event[3]}\n'
            f'üîë –î–æ—Å—Ç—É–ø: {new_event[5]}',
            parse_mode='HTML',
            reply_markup=gen_event_markup(message.from_user.id, new_event[0])
        )
        await ev_helper.event.set()

@dp.message_handler(state=ev_helper.edit_url)
async def state10(message: types.Message, state: FSMContext):
    data = await state.get_data()
    event = data.get("event")
    await event_update("url", message.text, event[1])
    new_event = await search_event(event[1])
    await state.update_data(event=new_event)
    await dp.bot.delete_message(message_id=message.message_id,chat_id=message.from_user.id)
    if event is not None:
        await dp.bot.edit_message_text(
        chat_id=message.from_user.id,
        message_id=message.message_id,
            text=
            f"üéñ –ù–∞–∑–≤–∞–Ω–∏–µ: {new_event[1]}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {new_event[2]}\n"
            f'üîó –°—Å—ã–ª–∫–∞: {new_event[3]}\n'
            f'üì£ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:  tg://user?id={new_event[0]}\n'
            f'üîë –î–æ—Å—Ç—É–ø: {new_event[5]}',
            parse_mode='HTML',
            reply_markup=gen_event_markup(message.from_user.id, new_event[0])
        )
        await ev_helper.event.set()

@dp.message_handler(state=ev_helper.edit_access)
async def state10(message: types.Message, state: FSMContext):
    data = await state.get_data()
    event = data.get("event")
    await event_update("access", message.text, event[1])
    new_event = await search_event(event[1])
    await state.update_data(event=new_event)
    await dp.bot.delete_message(message_id=message.message_id,chat_id=message.from_user.id)
    if event is not None:
        await dp.bot.edit_message_text(
        chat_id=message.from_user.id,
        message_id=message.message_id,
            text=
            f"üéñ –ù–∞–∑–≤–∞–Ω–∏–µ: {new_event[1]}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {new_event[2]}\n"
            f'üîó –°—Å—ã–ª–∫–∞: {new_event[3]}\n'
            f'üîë –î–æ—Å—Ç—É–ø: {new_event[5]}',
            parse_mode='HTML',
            reply_markup=gen_event_markup(message.from_user.id, new_event[0])
        )
        await ev_helper.event.set()

@dp.message_handler(state=ev_helper.edit_psettings)
async def state10(message: types.Message, state: FSMContext):
    data = await state.get_data()
    event = data.get("event")
    await event_update("psettings", message.text, event[1])
    new_event = await search_event(event[1])
    await state.update_data(event=new_event)
    await dp.bot.delete_message(message_id=message.message_id,chat_id=message.from_user.id)
    if event is not None:
        await dp.bot.edit_message_text(
        chat_id=message.from_user.id,
        message_id=message.message_id,
            text=
            f"üéñ –ù–∞–∑–≤–∞–Ω–∏–µ: {new_event[1]}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {new_event[2]}\n"
            f'üîó –°—Å—ã–ª–∫–∞: {new_event[3]}\n'
            f'üîë –î–æ—Å—Ç—É–ø: {new_event[5]}\n',
            parse_mode='HTML',
            reply_markup=gen_event_markup(message.from_user.id, new_event[0])
        )
        await ev_helper.event.set()


def genmarkup(intended, data):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    for i in data:
        markup.add(InlineKeyboardButton(f"{i[1] if str(intended) != i[0] else i[1] + ' ‚≠ê'}", callback_data=i[1]))
    return markup


def gen_event_markup(intended, event):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton(_("üé´ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"), callback_data="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"))
    if str(intended) == str(event):
        markup.add(InlineKeyboardButton(f"‚öô –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"))
    markup.add(InlineKeyboardButton(_("üèÉüèª‚Äç –ù–∞–∑–∞–¥"), callback_data="–û—Ç–º–µ–Ω–∏—Ç—å"))
    return markup
