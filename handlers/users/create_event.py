import uuid
import simplejson as json
import logging
import re
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.handler import CancelHandler
from aiogram.types import CallbackQuery

from database.events import event_reg
from database.events.events import event_reg2
from filters import AdminCommand
from loader import dp, bot
from states import create_event
from utils.misc import rate_limit
import datetime as dt
from data.config import settings

async def generate_weeks(date,weeks_count) -> list:
    weeks = []
    date = dt.datetime.strptime(date, '%Y-%m-%d')
    d = 0
    for i in range(weeks_count):
        week = dt.date(date.year, date.month, date.day) + dt.timedelta(days=d)
        weeks.append(week.isoformat())
        d += 7
    return weeks

@dp.callback_query_handler(state=create_event.type)
async def event_type_handler(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if call.data == 'hater':
        await call.bot.send_message(chat_id=call.from_user.id, text=
                    '–í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –ø—Ä–∞–≤–∏–ª—É "1 –ø—É–Ω–∫—Ç = 1 —Å—Ç—Ä–æ–∫–∞"\n\n'
                    '1.–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞\n'
                    '2.–û–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞\n'
                    '3.–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                    '\n\n'
                    '*–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ = –¥–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–µ—Ä–≤—ã—Ö –≥–∞–∑–µ—Ç, –≤—Å–µ–≥–¥–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ.')
        data['type'] = call.data
        await state.update_data(data)
        await create_event.maker_other.set()
    elif call.data == 'clan_event':
        await call.bot.send_message(chat_id=call.from_user.id, text=
                            '–í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –ø—Ä–∞–≤–∏–ª—É "1 –ø—É–Ω–∫—Ç = 1 —Å—Ç—Ä–æ–∫–∞"\n\n'
                            '1.–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞\n'
                            '2.–û–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞\n'
                            '3.–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                            '4.–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞(–ì–ì–ì–ì-–ú–ú-–î–î)\n'
                            '5.–ö–æ–ª-–≤–æ –Ω–µ–¥–µ–ª—å\n'
                            '6.–ü–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–µ–¥–µ–ª–∏(—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)\n')
        data['type'] = call.data
        await state.update_data(data)
        await create_event.maker.set()
    elif call.data == 'rabbit_event':
        await call.bot.send_message(chat_id=call.from_user.id, text=
                    '–í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –ø—Ä–∞–≤–∏–ª—É "1 –ø—É–Ω–∫—Ç = 1 —Å—Ç—Ä–æ–∫–∞"\n\n'
                    '1.–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞\n'
                    '2.–û–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞\n'
                    '3.–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                    '\n\n'
                    '*–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ = –¥–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–µ—Ä–≤—ã—Ö –≥–∞–∑–µ—Ç, –≤—Å–µ–≥–¥–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ.')
        data['type'] = call.data
        await state.update_data(data)
        await create_event.maker_other.set()
    else:
        await state.finish()
        CancelHandler()

@dp.message_handler(state=create_event.maker)
async def maker(message: types.Message, state: FSMContext):
    try:
        points = [
            'title',
            'description',
            'message_link',
            'date_start',
            'weeks_count',
            'special'
        ]
        answer = message.text
        if answer == 'z':
            answer = 'CLAN WARS\nDescr\nurl_to_message\n2023-02-26\n4\nüåµ,üåª,üåπ,üå∫'
        event = answer.split("\n")
        raw_dict = dict(zip(points, event))
        raw_dict['weeks_count'] = int(raw_dict.pop('weeks_count', len(raw_dict['special'].split(","))))

        if len(raw_dict['special'].split(",")) != raw_dict['weeks_count']:
            await message.reply('Buildings count must be equal to weeks count\nRegistation canceled')
            await state.finish()
            CancelHandler()

        if dt.datetime.strptime(raw_dict['date_start'], '%Y-%m-%d').weekday() != 6:
            await message.reply('Start date must be on Sunday\nRegistation canceled')
            await state.finish()
            CancelHandler()

        datelist = await generate_weeks(raw_dict['date_start'], raw_dict['weeks_count'])

        raw_dict['weeks'] = []

        for i in range(len(datelist)):
            raw_dict['weeks'].append({'special_building': raw_dict['special'].split(",")[i], 'date':datelist[i]})

        raw_dict.pop("weeks_count", None)
        raw_dict.pop("date_start", None)
        raw_dict.pop("special", None)
        
        await state.update_data(raw_dict)

        settings_show = "\n".join(settings)
        await message.reply('üß¨ Points-–ø—Ä–∞–≤–∏–ª–∞.\n'
                '–ó–∞ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤–∞–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ points,\n'
                '–ù–∞–ø—Ä–∏–º–µ—Ä: 5000 —É–±–∏—Ç—ã—Ö –∫—Ä—ã—Å - 1 –∑–≤–µ–∑–¥–∞\n\n'
                '–í–≤–æ–¥–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∑–∞ –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∏–∂–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤:\n'
                f'{settings_show}\n'
                '–ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç - –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞, –ø—Ä–∏–º–µ—Ä:\n'
                '5000\n'
                '2500\n–∏ —Ç.–¥.\n'
                '–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –≤—ã –≤—ã—Å—Ç–∞–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è s_police –∏ s_police_heli –∏ —Ç.–¥.\n'
                '5000 —É–±–∏—Ç—ã—Ö –ø–æ–ª–∏—Ü–µ–π—Å–∫–∏—Ö = 1 –∑–≤–µ–∑–¥–∞\n'
                '2500 —É–±–∏—Ç—ã—Ö –≤–µ—Ä—Ç–æ–ª—ë—Ç–æ–≤ = 1 –∑–≤–µ–∑–¥–∞. –∏ —Ç.–¥.')
        await create_event.s_setler.set()
    except:
        await message.reply('Ucough, something in input is wrong\nRegistation canceled')
        await state.finish()
        CancelHandler()


@dp.message_handler(state=create_event.s_setler)
async def s_setler(message: types.Message, state: FSMContext):
    try:
        answer = message.text
        if answer == 'z':
            answer = '5000\n2500\n250\n1000\n50\n25\n25\n5000\n2'
        event = answer.split("\n")
        if len(event) != len(settings):
            await message.reply('Not all/More than settings are set\nRegistation canceled')
            await state.finish()
            CancelHandler()
        raw_dict = dict(zip(settings, event))
        data = await state.get_data()
        data['rules'] = [{'count': v, 'type': k} for k,v in raw_dict.items()]
        data['creator_id'] = message.from_user.id
        data['uuid'] = uuid.uuid4()
        await state.update_data(data)
        await event_reg2(state)
        await state.finish()
        CancelHandler()
    except:
        await message.reply('Ucough, something in input is wrong\nRegistation canceled')
        await state.finish()
        CancelHandler()


@dp.message_handler(state=create_event.maker_other)
async def maker2(message: types.Message, state: FSMContext):
    points = [
        'title',
        'description',
        'message_link'
    ]
    answer = message.text
    event = answer.split("\n")
    raw_dict = dict(zip(points, event))
    raw_dict['creator_id'] = message.from_user.id
    raw_dict['uuid'] = uuid.uuid4()
    await state.update_data(raw_dict)
    await event_reg2(state)
    await state.finish()
    CancelHandler()
